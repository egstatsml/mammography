#!/usr/bin/python

import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import os
import sys
import numpy as np
from scipy.ndimage.measurements import label
import xml.etree.cElementTree as ET
from PIL import Image
import operator

"""
ddsm_to_xml.py

Description:
 Converts the annotated files from the DDSM database into an XML file that can be more easily handled by current RCNN examples 


import xml.etree.cElementTree as ET

root = ET.Element("root")
doc = ET.SubElement(root, "doc")

ET.SubElement(doc, "field1", name="blah").text = "some value1"
ET.SubElement(doc, "field2", name="asdfasd").text = "some vlaue2"

tree = ET.ElementTree(root)
tree.write("filename.xml")

will generate something like

<root>
 <doc>
     <field1 name="blah">some value1</field1>
     <field2 name="asdfasd">some vlaue2</field2>
 </doc>

</root>

"""







def mask_to_xml(fname):
    
    im = np.array(Image.open(fname))
    print im.shape
    im = np.nanmin(im, axis=2)
    im[im != 0] = 1
    im = im.astype(np.int)
    
    labels, num_features = label(im)
    size = {}
    for ii in range(1, num_features + 1):
        size[ii] = np.sum(labels == ii)
        
    #find the label with the largest area
    biggest_key = max(size, key=size.get)
    pos = np.where(labels == biggest_key)
    boundary_y = pos[0]
    boundary_x = pos[1]
    top_x = np.min(boundary_x) - 5
    top_y = np.min(boundary_y) - 5
    bottom_x = np.max(boundary_x) + 5
    bottom_y = np.max(boundary_y) + 5
    
    #make sure these values are ok and not outside the dimensions of the image
    if(top_x < 0):
        top_x = 0
    if(top_y < 0):
        top_y = 0
    if(bottom_x >= im.shape[1]):
        bottom_x = bottom_x - 5
    if(bottom_y >= im.shape[0]):
        bottom_y = bottom_y - 5
        
    if('calcification' in fname):
        lesion_type = 'microcalcification'
    else:
        lesion_type = 'mass'
        
        
    create_xml(fname, lesion_type, top_x, top_y, bottom_x, bottom_y)
    
    
    
    
    
    
    
def create_xml(fpath, lesion_type, top_x, top_y, bottom_x, bottom_y):
    
    fname = os.path.basename(fpath)[0:-9]
    annotation_dir = "/media/dperrin/Data/INBreast/Annotations"
        
    #load in the file so we can get it's dimensions
    im = Image.open(fpath)
    
    #reading the size using the indecies back the front because it is
    #an Imgae object and not an arrow
    #
    #Why do they do this to me :(
    height = im.size[1] 
    width = im.size[0]
    
    #make sure all the bounding boxes are within reasonable ranges
    #print width
    #print bottom_x
    
    assert(bottom_y < height)
    assert(bottom_x < width)
    
    
    root = ET.Element("annotation")
    ET.SubElement(root, "filename").text = fname
    #size data for the image
    sz = ET.SubElement(root, "size")
    ET.SubElement(sz,"height").text = str(height) 
    ET.SubElement(sz,"width").text = str(width)
    ET.SubElement(sz,"depth").text = "1"
    
    #object information (which is the lesion found)
    obj = ET.SubElement(root, "object")
    ET.SubElement(obj, 'name').text = lesion_type
    bndbox = ET.SubElement(obj, "bndbox")
    ET.SubElement(bndbox, "xmin").text = str(top_x)
    ET.SubElement(bndbox, "ymin").text = str(top_y)
    ET.SubElement(bndbox, "xmax").text = str(bottom_x)
    ET.SubElement(bndbox, "ymax").text = str(bottom_y)
    
    
    
    #now write the XML file
    #for the microcalcification files in this data set, am adding a prefix as some scans have both
    #masses and calcifications
    #means we get the most datas
    if(lesion_type == 'microcalcification'):
        fname = 'calc_' + fname
    sv_path = os.path.join(annotation_dir, fname + '.txt')
    tree = ET.ElementTree(root)
    tree.write( sv_path )
    print sv_path
    
    
    
    
    
if __name__ == "__main__":
    
    #for now just have an example file
    
    for root in ["/media/dperrin/Data/INBreast/annotation/", "/media/dperrin/Data/INBreast/calcification/"]: #../data/"
        #read in the overlay file
        
        #for this test will just loop through all the files in the data folder
        for file_name in os.listdir(root):
            print file_name
            try:
                
                fpath = os.path.join(root, file_name)
                
                mask_to_xml(fpath)
                
            except:
                raise
                pass
